//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace titan {

public class NativeProcessDI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal NativeProcessDI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NativeProcessDI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NativeProcessDI() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          LibTitanSystemPINVOKE.delete_NativeProcessDI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual SWIGTYPE_p_std__vectorT_NativeProcessId_t enumProcesses() {
    SWIGTYPE_p_std__vectorT_NativeProcessId_t ret = new SWIGTYPE_p_std__vectorT_NativeProcessId_t(LibTitanSystemPINVOKE.NativeProcessDI_enumProcesses(swigCPtr), true);
    if (LibTitanSystemPINVOKE.SWIGPendingException.Pending) throw LibTitanSystemPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_NativeString getProcessPath(SWIGTYPE_p_NativeProcessHandle handle) {
    SWIGTYPE_p_NativeString ret = new SWIGTYPE_p_NativeString(LibTitanSystemPINVOKE.NativeProcessDI_getProcessPath(swigCPtr, SWIGTYPE_p_NativeProcessHandle.getCPtr(handle)), true);
    if (LibTitanSystemPINVOKE.SWIGPendingException.Pending) throw LibTitanSystemPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getProcessFriendlyName(SWIGTYPE_p_NativeString fullPath) {
    string ret = LibTitanSystemPINVOKE.NativeProcessDI_getProcessFriendlyName(swigCPtr, SWIGTYPE_p_NativeString.getCPtr(fullPath));
    if (LibTitanSystemPINVOKE.SWIGPendingException.Pending) throw LibTitanSystemPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_int64_t getProcessStartTime(SWIGTYPE_p_NativeProcessHandle handle) {
    SWIGTYPE_p_int64_t ret = new SWIGTYPE_p_int64_t(LibTitanSystemPINVOKE.NativeProcessDI_getProcessStartTime(swigCPtr, SWIGTYPE_p_NativeProcessHandle.getCPtr(handle)), true);
    if (LibTitanSystemPINVOKE.SWIGPendingException.Pending) throw LibTitanSystemPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NativeProcessDI() : this(LibTitanSystemPINVOKE.new_NativeProcessDI(), true) {
  }

}

}
